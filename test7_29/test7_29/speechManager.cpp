#include"speechManager.h"

//构造函数
SpeechManager::SpeechManager()
{
	//初始化容器和属性
	this->initSpeech();
	//创建选手
	this->createSpeaker();
	//获取往届记录
	this->loadRecord();

	this->m_Record.clear();
}
void SpeechManager::initSpeech()
{
	//容器置空
	this->v1.clear();
	this->v2.clear();
	this->Vv.clear();
	this->m_Speaker.clear();

	//初始化比赛轮次
	this->m_Index = 1;
}
void SpeechManager::show_Menu()
{
	cout << "********************************" << endl;
	cout << "*****   欢迎参加演讲比赛   *****" << endl;
	cout << "*****   1.开始演讲比赛     *****" << endl;
	cout << "*****   2.查看往届记录     *****" << endl;
	cout << "*****   3.清空比赛记录     *****" << endl;
	cout << "*****   0.退出比赛程序     *****" << endl;
	cout << "********************************" << endl;
}
void SpeechManager::createSpeaker()
{
	string nameSeed = "ABCDEFGHIJKL";
	for (int i = 0; i < nameSeed.size(); i++)
	{
		string name = "选手";
		name += nameSeed[i];

		Speaker sp;
		sp.m_Name = name;
		for (int j = 0; j < 2; j++)
		{
			sp.m_Score[j] = 0;
		}
		//创建选手编号放入vector中
		this->v1.push_back(i+10001);
		//将选手编号以及对应的选手放到map中
		this->m_Speaker.insert(make_pair(i + 10001, sp));
	}
}
void SpeechManager::speechDraw()
{
	cout << "第<<" << this->m_Index << ">>轮比赛选手正在抽签" << endl;
	cout << "----------------------------------------------" << endl;
	cout << "抽签后演讲顺序如下：" << endl;
	if (this->m_Index == 1)
	{
		random_shuffle(v1.begin(), v1.end());
		for (vector<int>::iterator it = v1.begin(); it != v1.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	else
	{
		random_shuffle(v2.begin(), v2.end());
		for (vector<int>::iterator it = v2.begin(); it != v2.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	cout << "--------------------------------------------------" << endl;
	system("pause");
	cout << endl;
}
void SpeechManager::speechContest()
{
	cout << "-------------第<<" << this->m_Index << ">>轮比赛正式开始：-------------" << endl;

	multimap<double, int, greater<double>>groupScore;//临时容器，保存key分数，value选手编号
	int num = 0;//记录人员数，6个为一组

	vector<int>v_Scr;//比赛的人员容器
	if (this->m_Index == 1)
	{
		v_Scr = v1;
	}
	else
	{
		v_Scr = v2;
	}
	//遍历所有选手
	for (vector<int>::iterator it = v_Scr.begin(); it != v_Scr.end(); it++)
	{
		num++;

		deque<double>d;
		for (int i = 0; i < 10; i++)
		{
			double score = (rand() % 401 + 600) / 10.f;
			//cout << score << " ";
			d.push_back(score);
		}

		sort(d.begin(), d.end(), greater<double>());//排序
		d.pop_back();
		d.pop_front();

		double sum = accumulate(d.begin(), d.end(), 0.0f);//获取总和
		double avg = sum / d.size();//获取平均分

		//每个人的平均分

		this->m_Speaker[*it].m_Score[this->m_Index - 1] = avg;

		//6人一组，用临时容器保存
		groupScore.insert(make_pair(avg, *it));
		if (num % 6 == 0)
		{
			cout << "第" << num / 6 << "小组比赛名次：" << endl;
			for (multimap<double, int, greater<double>>::iterator it = groupScore.begin(); it != groupScore.end(); it++)
			{
				cout << "编号：" << it->second << " 姓名：" << this->m_Speaker[it->second].m_Name
					<< " 成绩：" << this->m_Speaker[it->second].m_Score[this->m_Index - 1] << endl;
			}
			int count = 0;
			for (multimap<double, int, greater<double>>::iterator it = groupScore.begin(); it != groupScore.end() && count < 3; it++, count++)
			{
				if (this->m_Index == 1)
				{
					v2.push_back((*it).second);
				}
				else
				{
					Vv.push_back((*it).second);
				}
			}
			groupScore.clear();
			cout << endl;
		}
	}
	cout << "------------------------第" << this->m_Index << "轮比赛完毕-------------------" << endl;
	system("pause");
}
void SpeechManager::showScore()
{
	cout << "--------------第" << this->m_Index << "轮晋级选手信息如下：----------------" << endl;
	vector<int>v;
	if (this->m_Index == 1)
	{
		v = v2;
	}
	else
	{
		v = Vv;
	}
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "编号：" << *it << " 姓名：" << m_Speaker[*it].m_Name
			<< " 成绩：" << this->m_Speaker[*it].m_Score[this->m_Index - 1] << endl;
	}
	cout << endl;

	system("pause");
	system("cls");
	this->show_Menu();
}
void SpeechManager::saveRecord()
{
	ofstream ofs;
	ofs.open("speech.csv", ios::out | ios::app);//用输出的方式打开文件
	
	//将每个人的数据写入到文件中
	for (vector<int>::iterator it = Vv.begin(); it != Vv.end(); it++)
	{
		ofs << *it << ","
			<< m_Speaker[*it].m_Score[1] << ",";
	}
	ofs << endl;

	//关闭文件
	ofs.close();

	cout << "记录保存成功" << endl;
	
	this->fileIsEmpty = false;
}
void SpeechManager::startSpeech()
{
	//第一轮比赛
	//1.抽签
	this->speechDraw();
	//2.比赛
	this->speechContest();
	//3.显示晋级结果
	this->showScore();
	//第二轮比赛
	this->m_Index++;
	//1.抽签
	this->speechDraw();
	//2.比赛
	this->speechContest();
	//3.显示晋级结果
	this->showScore();
	//保存分数
	saveRecord();
	//重置比赛
	//初始化属性
	this->initSpeech();
	//创建选手
	this->createSpeaker();
	//获取往届记录
	this->loadRecord();
	cout << "本届比赛完毕！" << endl;
	system("pause");
	system("cls");
}
void SpeechManager::loadRecord()
{
	ifstream ifs("speech.csv", ios::in);//输入流对象 读取对象

	if (!ifs.is_open())
	{
		this->fileIsEmpty = true;
		cout << "文件不存在" << endl;
		ifs.close();
		return;
	}
	char ch;
	ifs >> ch;
	if(ifs.eof())
	{
		cout << "文件为空" << endl;
		this->fileIsEmpty = true;
		ifs.close();
		return;
	}

	//文件不为空
	this->fileIsEmpty = false;
	ifs.putback(ch);//把读走的一个字符拿回来
	
	string data;
	int index = 0;
	while (ifs >> data)
	{
		vector<string>v;

		int pos = -1;
		int start = 0;
		while (1)
		{
			pos = data.find(",", start);//从0开始查找","
			if (pos == -1)
			{
				break;//找不到break 返回
			}
			string tmp = data.substr(start, pos - start);//找到了，进行分割

			v.push_back(tmp);
			start = pos + 1;
		}
		this->m_Record.insert(make_pair(index, v));
		index++;
	}
	ifs.close();
	//测试
	//for (map<int, vector<string>>::iterator it = m_Record.begin(); it != m_Record.end(); it++)
	//{
	//	cout << it->first << " 冠军编号：" << it->second[0] << " 分数：" << it->second[1]<<endl;
	//}

}
void SpeechManager::showRecord()
{
	if (this->fileIsEmpty)
	{
		cout << "文件为空或不存在" << endl;
	}
	for (int i = 0;i < this->m_Record.size(); i++)
	{
		cout << "第" << i + 1 << "届" <<
			"冠军编号：" << this->m_Record[i][0] << "得分：" << this->m_Record[i][1] << " "
			"亚军编号：" << this->m_Record[i][2] << "得分：" << this->m_Record[i][3] << " "
			"季军编号：" << this->m_Record[i][4] << "得分：" << this->m_Record[i][5] << endl;
	}
	system("pause");
	system("cls");
}
void SpeechManager::clearRecord()
{
	cout << "确认清空？" << endl;
	cout << "1.确定" << endl;
	cout << "2.返回" << endl;

	int select = 0;
	cin >> select;

	if (select == 1)
	{
		//打开模式 ios::trunc 如果存在 删除文件并重新创建
		ofstream ofs("speech.csv",ios::trunc);
		ofs.close();

		//初始化属性
		this->initSpeech();

		//创建选手
		this->createSpeaker();

		//获取往届记录
		this->loadRecord();

		cout << "清空成功" << endl;
	}
	system("pause");
	system("cls");
}
//析构函数
SpeechManager::~SpeechManager()
{


}